snippet xphead "xphead" b
/* This class is part of the XP framework
 *
 * $Id:$
 */
  
endsnippet

snippet with "xp with" b
with ($${1:value}= ${2:test}); {
  $${1}->${3:method};
}
endsnippet

snippet xpclass "xp class" b
/**
 * ${1}
 *
 * @purpose  (Add purpose)
 * @test     xp://path.to.$2Test
 */
class ${2:ClassName} extends ${3:Object} {
  /**
   * Constructor
   *
   * @param   ${4:string} ${5:argument}
   */
  public function ${6:__construct}(\$$5) {
    ${7:// code...}
  }
}
endsnippet

snippet dbcon "Database conneciton (Connection Manager)" b
$db= ConnectionManager::getInstance()->getByHost('${1:conname}', 0);
endsnippet

snippet xpfunc "function, no params" b
/**
 * ${1:Description}
 *
 * @return ${2:type}
 * @throws ${3:Exception}
 */
public function ${4:functionName}() {
  ${5:// code...}
}
endsnippet

snippet xpfunc "function, one param" b
/**
 * ${1:Description}
 *
 * @param  ${2:type} ${3:param1}
 * @return ${4:type}
 * @throws ${5:Exception}
 */
public function ${6:functionName}($$3) {
  ${7:// code...}
}
endsnippet

snippet xpfunc "function, two params" b
/**
 * ${1:Description}
 *
 * @param  ${2:type} ${3:param1}
 * @param  ${4:type} ${5:param1}
 * @return ${6:type}
 * @throws ${7:Exception}
 */
public function ${8:functionName}($$3, $$5) {
  ${7:// code...}
}
endsnippet

snippet xpcmd "xp command" b
uses(
  'util.cmd.Command'
);

/**
 * ${1}
 */
class ${2:ClassName} extends Command {
  protected 
    $verbose = FALSE;

  /**
   * Set verbose mode
   *
   */
  #[@arg]
  public function setVerbose() {
    $this->verbose= TRUE;
  }

  /**
   * Runs this object
   *
   */
  public function run() {
    ${3:// code...}
  }
}
endsnippet

snippet xpget "xp getter" b
/**
 * Get $1
 *
 * @return ${2:type}
 */
public function get${1:Name}() {
  return $this->${1/./\l$0/};
}
endsnippet

snippet xpset "xp setter" b
/**
 * Set $1
 *
 * @param ${2:type} ${1/./\l$0/}
 */
public function set${1:Name}($${1/./\l$0/}) {
  $this->${1/./\l$0/}= $${1/./\l$0/};
}
endsnippet

snippet xpsetget "xp setter and getter" b
/**
 * Set $1
 *
 * @param ${2:type} ${1/./\l$0/}
 */
public function set${1:Name}($${1/./\l$0/}) {
  $this->${1/./\l$0/}= $${1/./\l$0/};
}

/**
 * Get $1
 *
 * @return $2
 */
public function get$1() {
  return $this->${1/./\l$0/};
}
endsnippet

snippet xpargn "xp command class argument" b
/**
 * ${1:text}
 *
 * @param   ${2:type} ${3:name}
 */
#[@arg(name= '$3', short= '${4:short}')]
public function set${3/./\u$0/}($$3${5:= ${6:initial}}) {
  $this->$3= $$3;
}
endsnippet

snippet xpcmdinj "xp command class injection" b
/**
 * Injection
 *
 * @param   rdbms.DBConnection $1
 */
#[@inject(type= 'rdbms.DBConnection', name= '${1:name}')]
public function set${1/./\u$0/}($$1) {
  $$1->connect();
  $this->$1= $$1;
}
endsnippet

snippet xpwl "xp writeLine" b
$this->${1:out}->writeLine(${1:text});
endsnippet

snippet xpwl "xp writeLinef" b
$this->${1:out}->writeLinef("${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}

endsnippet

snippet xpunittest "xp unittest class" b
uses(
  'unittest.TestCase',
  '${1:path.to.testing.class}'
);

/**
 * ${2:Description}
 *
 * @purpose  unittest
 * @see      xp://$1
 */
class ${2:TestName} extends TestCase {

  /**
   * Set up this test
   *
   */
  public function setUp() {
    ${3:// Enter code here or delete this function}
  }

  /**
   * Tear down the this test case.
   * 
   */
  public function tearDown() {
    ${4:// Enter code here or delete this function}
  }
  ${0}
}
endsnippet

snippet xplog "xp log (debug)" b
$log= Logger::getInstance();
$cat= $log->getCategory('default');
$cat->warn(${1:value});
endsnippet

snippet xput "unittest function" b
/**
 * ${1:Add description here}
 *
 */
 #[@test]
public function ${2:testMethod}() {
  ${3:// code...}
}
endsnippet

snippet xpute "unittest function, expect exception" b
/**
 * ${1:Add description here}
 *
 */
 #[@test, @expect(class= '${2:lang.IllegalArgumentException}'${3:, withMessage= '${4:message}'})]
public function ${5:testMethod}() {
  ${6:// code...}
}
endsnippet

snippet xputb "unittest setup (MockConnection)" b
/**
 * Setup
 *
 */
#[@beforeClass]
public static function beforeClass() {
  // Register driver for "mock"
  DriverManager::register('mock', XPClass::forName('net.xp_framework.unittest.rdbms.mock.MockConnection'));

  // Setup connections w/ mock driver
  $cm= ConnectionManager::getInstance();
  $cm->pool= array();
  $cm->register(DriverManager::getConnection('mock://host/database?autoconnect=1'), '${1:dbname}', '');

}
endsnippet

snippet xputb "unittest setup function (@beforeClass)" b
/**
 * Cleanup
 *
 */
#[@beforeClass]
public static function ${1:beforeMethod}() {
  ${2:// code...}
}
endsnippet

snippet xputa "unittest cleanup function (@afterClass)" b
/**
 * Cleanup
 *
 */
#[@afterClass]
public static function ${1:afterMethod}() {
  ${2:// code...}
}
endsnippet

snippet xputex"unittest @expect annotation"
#[@test, @expect(class= '${1:lang.IllegalArgumentException}'${2:, withMessage= '${3:message}'})]
endsnippet

snippet xppcon "" b
parent::__construct();

endsnippet

snippet xppclon "" b
parent::__clone();

endsnippet
